#+TITLE: EST Operator Design
#+AUTHOR: Timothy J. Miller
#+STARTUP: inlineimages
#+NAME: caption_wrap
#+BEGIN_SRC sh :var text="" :var data=""" :results output silent :exports none
echo "#+CAPTION: $text"
echo "$data"
#+END_SRC

* Concept
This operator is implemented as [[https://cert-manager.io/docs/configuration/external/][an External issuer type]] for [[https://cert-manager.io/][cert-manager]].  In accordance with the documentation, we define a new Issuer type and a controller that watches the ~CertificateRequest~ resource and implements the [[https://tools.ietf.org/html/rfc7030][RFC 7030 interface]].  The controller communucates back to ~cert-manager~ via the ~CertificateRequest~ resource status and conditions fields.
* Resources
~est-operator~ includes two custom resources: ~EstIssuer~ and ~EstClusterIssuer~.  These resources define RFC 7030 service endpoints for namespace and cluster-scoped issuers.  ~CertificateRequest~ resources from [[https://cert-manager.io/][cert-manager]] is used in the certificate issuance process, and Kubernetes ~Secret~ resources of type =kubernetes.io/basic-auth= and =kubernetes.io/tls= hold issuance credentials.

#+BEGIN_SRC plantuml :file images/classes.png :cache yes :results drawer :post caption_wrap("~est-operator~ resources", *this*)
skinparam linetype ortho
mainframe **class** est-operator
package "est.mitre.org/v1alpha1" {

    class EstIssuer {
        #host : string
        port : integer [1..65535]
        label : string
        #cacert : base64 string
        secretName : string
    }

        class EstClusterIssuer {
        #host : string
        port : integer [1..65535]
        label : string
        #cacert : base64 string
        secretName : string
    }
}

package "cert-manager.io/v1" {
    class CertificateRequest {
        request : base64 string
        issuerRef : object
    }
}

package v1 {
    class Secret {
    }
}

EstIssuer ..> Secret
EstClusterIssuer ..> Secret
CertificateRequest ..> EstIssuer
CertificateRequest ..> EstClusterIssuer
#+END_SRC

#+RESULTS[ffa09339aa5fe936b808883bd1e254675fe08b1b]:
:results:
#+CAPTION: ~est-operator~ resources
[[file:images/classes.png]]
:end:

** EstIssuer and EstClusterIssuer resources
These resources describe an certificate enrollment portal that supports the [[https://tools.ietf.org/html/rfc7030][RFC 7030 Enrollment over Secure Transport]] interface.  Both resources have the same attributes, but ~EstIssuer~ is namespace scoped and ~EstClusterIssuer~ is cluster scoped.
- *host*: (required) DNS name of the portal.
- *port*: Port number of the portal; default: 443.
- *label*: Interface label [[https://tools.ietf.org/html/rfc7030#section-3.2.2][as described in RFC 7030 Sec. 3.2.2]].  Labels are added to the "well-known" path and enable one portal to support multiple issuers.
- *cacert*: (required) The root certificate the portal issues under.  The certificate must be in PEM encoding.
- *secretName*: The name of a Secret holding the EST Portal credential.  ~estoperator~ supports HTTP Basic Authentication for initial enrollment.  Secrets must be in the same namespace as ~EstIssuer~ resources.  Secrets for ~EstClusterIssuer~ resources must be in a namespace defined by the deployment (defaults to "cert-manager").
* Behavior
The following sequence diagrams describe the behavior of ~est-operator~ for each of its managed resources.
** EstIssuer and EstClusterIssuer activity
#+BEGIN_QUOTE
*Note*: EstClusterIssuer activity is identical to EstIssuer.
#+END_QUOTE
#+BEGIN_SRC plantuml :file images/act-estissuer.png :cache yes :results drawer :post caption_wrap("~EstIssuer~ / ~EstClusterIssuer~ activity", *this*)
hide footbox
autonumber
mainframe **act** estissuer_create [EstIssuer]
actor User
control "estoperator" as estoperator
participant EstIssuer
participant Secret
database "EST Portal" as estportal
User -> EstIssuer : create
User -> Secret : create
estoperator -> EstIssuer : read
estoperator -> Secret : read
estoperator -> estoperator : cache
#+END_SRC

#+RESULTS[12d8a508cb5b3c48a60fe4f0d139df7bf173f0cf]:
:results:
#+CAPTION: ~EstIssuer~ / ~EstClusterIssuer~ activity
[[file:images/act-estissuer.png]]
:end:

1. The user deploys an issuer resource with the EST Portal host, port, label, trust anchor, and credential reference.
2. The user deploys a Secret holding the credential needed to access the EST Portal.
3. The operator reads the issuer.
4. The operator reads the Secret.
5. The operator builds an in-memory cache.

#+begin_quote
*Note*: ~estoperator~ only updates the in-memory cache when ~EstIssuer~ resources are updated or the operator restarts.
#+end_quote

** CertificateRequest activity
#+BEGIN_SRC plantuml :file images/act-certificaterequest.png :cache yes :results drawer :post caption_wrap("~CertificateRequest~ activity", *this*)
hide footbox
autonumber
mainframe **act** estoperator_certificaterequest [certificate]
actor User
control "cert-manager" as certmgr
control "estoperator" as estoperator
participant "Certificate"
participant "CertificateRequest"
collections "Cache" as EstIssuer
participant "Current key" as CertificateSecret
database "EST Portal" as estportal

User -> Certificate : create / renew
certmgr -> CertificateRequest : create
estoperator -> CertificateRequest : read
estoperator -> EstIssuer : read
alt initial enrollment
    estoperator -> estportal : /simpleenroll [HTTP Basic Auth]
else renew / rekey
    estoperator -> CertificateSecret : read
    estoperator -> estportal : /simplereenroll [TLS client cert]
end
estportal --> estoperator : application/pkcs7
estoperator -> CertificateRequest : update status
#+END_SRC
#+RESULTS[873374b45a833d692e3ab5a901ceee7ed9eb680e]:
:results:
#+CAPTION: ~CertificateRequest~ activity
[[file:images/act-certificaterequest.png]]
:end:

1. The user deploys a ~cert-manager~ Certificate resource or an existing resource is marked for [[https://cert-manager.io/next-docs/usage/certificate/#renewal][renewal]].  The ~issuerRef~ must have group ~est.mitre.org~ and kind ~EstIssuer~ or ~EstClusterIssuer~.
2. ~cert-manager~ deploys a CertificateRequest resource.
3. The operator reads the CertificateRequst and retrieves the certificate signing request (CSR).
4. The operator retrieve the portal endpoint, trust anchor, and issuance credential from the in-memory cache.

If this is a new request:
5. [@5] The operator submits the CSR to the portal using the issuance credential.

If this is a renewal or rekey request:
6. [@6] The operator retrieves the current certificate and private key.
7. The operator submits the CSR to the portal and receives a response using TLS client certificsate authentication.

Finalizing:
8. [@8] The operator receives a PKCS#7 object with the issued certificate.
9. The operator updates the CertificateRequest.

The ~cert-manager~ CertificateRequest controller watches for updates CertificateRequest status conditions completes the enrollment process.

*** Additional details
- If the CSR submission generates a TLS error or any HTTP error, ~estoperator~ will create an event with the details and retry in 600s.
- If the response from the portal is 202, the request was accepted but has not been signed.  ~estoperator~ will create an event and retry after the delay in the "Retry-After" response header (defaults to 600s if the header is not sent).

* Deployments
The folowing deployment diagrams describe how ~est-operator~ is deployed.  These deployments can be combined.

For diagram simplicity, the ~Certificate~ resource and the TLS ~Secret~ resource are not shown.  These resources are in the namesapce with the ~CertificateRequest~. 
** Namespaced deployment
~EstIssuer~ is namespace-scoped, and must be deployed in the same namespace where with the ~Certificate~ resources it services.  The issuer ~Secret~ must also be in this namespace.  This deployment services requests /only/ in this namespace.  This deployment is useful for private issuers.
#+BEGIN_SRC plantuml :file images/deployment.png :cache yes :results drawer :post caption_wrap("Namespaced deployment", *this*)
skinparam linetype ortho
skinparam ranksep 1
mainframe **dep** estoperator [EstIssuer]
node cluster {
    frame "cert-manager : namespace" as cm_ns {
        component "cert-manager : Deployment" as cm
    }
    frame "application1 : namespace" as app1_ns {
        artifact "app1-request : CertificateRequest" as app1_cr
        artifact "issuer1 : EstIssuer" as est_i
        artifact "estissuer-credential : Secret" as est_i_cred
    }
    frame "est-operator : namespace" as est_ns {
        component "estoperator : Deployment" as estoper
    }
}
cloud "other network" as cloud
' cert-manager deploys certificaterequests
cm o--> app1_cr
' estoperator communicates with issuer portals
estoper -0)- cloud : RFC 7030
' issuer uses secret
est_i .r.> est_i_cred
' app1 uses issuer
app1_cr ..> est_i
#+END_SRC

#+RESULTS[8a96d4cc4a2d243fb54ebb8033135e7e3e8c65ce]:
:results:
#+CAPTION: Namespaced deployment
[[file:images/deployment.png]]
:end:

** Cluster scoped deployment
~EstClusterIssuer~ is /cluster scoped/ and has no assigned namespace.  It can be used to service requests in any namespace.  Use this deployment when multiple applications use the same issuer.

The credential secret /MUST/ be in the namespace set in the environment variable ~DEFAULT_NAMESPACE~.  If not set, the the operator will default to namespace where ~estoperator~ is deployed.
TODO: use downward API to set this variable in the deployment.
#+BEGIN_SRC plantuml :file images/cluster-deployment.png :cache yes :results drawer :post caption_wrap("Cluster scope deployment", *this*)
skinparam ranksep 1
skinparam linetype ortho
mainframe **dep** est-operator [EstClusterIssuer]
node cluster {
    frame "cert-manager : namespace" as cm_ns {
        component "cert-manager : Deployment" as cm
    }
    frame "est-operator : namespace" as est_ns {
        artifact "estissuer-credential : Secret" as est_i_cred
        component "estoperator : Deployment" as estoper
    }
    artifact "issuer1 : EstClusterIssuer" as est_i  
    frame "application1 : namespace" as app1_ns {
        artifact "app1-request : CertificateRequest" as app1_cr
    }
    frame "application2 : namespace" as app2_ns {
        artifact "app2-request : CertificateRequest" as app2_cr
    }
}
cloud "other network" as cloud
' cert-manager deploys certificaterequests
cm o--> app1_cr
cm o--> app2_cr
' estoperator communicates with issuer portals
estoper -(0- cloud : RFC 7030
' issuer uses secret
est_i ..> est_i_cred
' apps uses same issuer
app1_cr ..> est_i
app2_cr ..> est_i
#+END_SRC

#+RESULTS[4f148e20c3e17736843d24400d5b125642bc83c9]:
:results:
#+CAPTION: Cluster scope deployment
[[file:images/cluster-deployment.png]]
:end:
