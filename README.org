#+TITLE: Certificate Manager Enrollment Over Secure Transport
* About
~estoperator~ is a [[https://cert-manager.io/][cert-manager]] [[https://cert-manager.io/docs/configuration/external/]["External" certificate issuer]] that implements a subset of [[https://tools.ietf.org/html/rfc7030][RFC 7030 Enrollment over Secure Transport]] (EST).  It provides custom resources for EST services and a custom controller that reconciles certificate requests.

~estoperator~ is written in Python using the [[https://kopf.readthedocs.io/en/stable/][kopf framework]].

This operator covers only a portion of RFC 7030; see [[docs/RFC7030.org][this document]] for an overview of what's implemented, planned, and not planned.

See [[docs/DESIGN.org][this document]] for an overview of this operator's design.
* Getting Started
** Prerequisites
- Kubernetes v1.19.1 or later.  ~estoperator~ should run on v1.16 or later, but is only tested with v1.19.1.
- Python 3.9 and packages.  [[./requirements.txt][requirements.txt]] has all Python package dependencies.  Install prerequistest with =pip=.

See FIPS section below for installing dependencies in that mode.

** Installing
For a production or other "in-cluster" installation, see [[Deployment]], below.  This section covers build and install for local development and test.

Install requirements with ~pip~.  The requiremnets file installs ~estoperator~ in "editable" mode.
#+begin_src bash
pip install -r requirements.txt
#+end_src

This project uses [[https://github.com/jazzband/pip-tools][pip-tools]] and [[https://setuptools.pypa.io/en/latest/][setuptools]] to manage dependencies.  =requirements.in= holds the development dependencies.  =requirements.txt= is compiled with Python 3.9.

** Running
~estoperator~ can be run "out of cluster," meaning in a process that runs outside of Kubernetes control.  This is useful for development, testing, and debugging.  This mode is not recommended for production.

The ~kopf~ command will use the current cluster context in ~KUBECONFIG~.
TODO: operator permissions
#+BEGIN_SRC shell :results silent
kopf run --verbose -Am estoperator
#+END_SRC

See [[https://kopf.readthedocs.io/en/stable/][kopf documentation]] for more details of running in this mode.

** Build
~estoperator~ should build with any PEP 517 compatible build system.  The default requirements use the ~build~ module.
#+begin_src bash
python -m build
#+end_src

** Testing
The test suite is developed with [[https://docs.pytest.org/en/6.2.x/][pytest]].
*** Style
TODO: style tests
*** Unit tests
TODO: unit tests
*** End-to-end
All end-to-end tests are marked "e2e" and require access to a cluster with [[https://cert-manager.io/][cert-manager]] installed.  The test suite uses [[https://github.com/kubernetes-client/python][the official Kubernetes python package]] and will authenticate using your ~KUBECONFIG~ current context.
TODO: e2e tests
TODO: e2e test permissions
* Deployment
TODO: cluster deployment (and manifests)
* Federal Information Processing Standards (FIPS) 140-2 certified mode
The operator can be built to satisfy FIPS 140-2 certification requirements.  FIPS 140-2 certification depends on the module and the platform.  A platform with Python dynamically linked to OpenSSL /and/ links OpenSSL to a validated version of the OpenSSL FIPS Object Module can demonstrate FIPS 140-2 certification.  Consult the [[https://csrc.nist.gov/projects/cryptographic-module-validation-program/validated-modules/search?SearchMode=Basic&ModuleName=OpenSSL&CertificateStatus=Active&ValidationYear=0][NIST Cryptographic Module Validation Program list of OpenSSL modules]] for combinations of OpenSSL and platform that are certified.

*Note*: OpenSSL 1.0.2 is no longer supported by the OpenSSL project, but OpenSSL FIPS Object Module 2.0 is not compatible with OpenSSL 1.1.  A new version is [[https://www.openssl.org/blog/blog/2018/09/25/fips/][not available nor certified yet.]]

Other FIPS certified modules are available (e.g., GnuTLS and Network Security Services) but the work to integrate these modules is extensive.  We welcome merge requests on this topic.

** Building a FIPS version
Requirements for FIPS mode vary slightly from above.  The ~cryptography~ package embeds a statically linked version of OpenSSL and is not compatible with OpenSSL 1.0.2, which is the latest FIPS certified version.

Install requirements with the following ~pip~ command.  You will need OpenSSL headers, Python3 headers, CFFI headers, and GCC.  See [[https://cryptography.io/en/latest/installation.html#][cryptography build instructions]] for details.

#+BEGIN_SRC bash :results silent
pip install -r fips-requirements.txt
#+END_SRC

** Building a FIPS container image
*Note*: This container image demonstrates FIPS 140-2 certification /only on Amazon Linux 2 running on AWS EC2/.

[[Dockerfile.fips][Dockerfile.fips]] builds a version of the operator image that maintains [[https://csrc.nist.gov/publications/detail/fips/140/2/final][FIPS 140-2]] certification.  The image is built on Amazon Linux 2 and has [[https://aws.amazon.com/blogs/publicsector/enabling-fips-mode-amazon-linux-2/][FIPS validated libraries installed according to AWS documentation.]]  The image runs with the environment variable ~OPENSSL_FIPS=1~ set, and startup code in [[estoperator/__init__.py][module initialization]] enables FIPS mode in the cryptographic library.

#+BEGIN_SRC bash :results silent :exports code
docker build -t est-operator:fips -f Dockerfile.fips .
#+END_SRC

** Running a FIPS version out of cluster 
If you have a FIPS certified version of OpenSSL installed and installed dependencies as above, the operator can be run "out of cluster" by ~OPENSSL_FIPS=1~ in the shell environment before running ~kopf~.  Otherwise we recommend using the container image.

* Built with
- Python 3.9
- [[https://github.com/nolar/kopf][kopf framework]]
- Docker / podman
- Kubernetes client

* Contibuting
TODO: contributing rules
* Versioning
TODO: versioning
* Authors
- Timothy J. Miller - /initial work/ - [[https://github.com/Cerebus][Cerebus]]
* License
[[./LICENSE][Apache License v2.0]]
* Acknowledgements
- [[https://www.mitre.org][The MITRE Corporation]] for allowing this work to be open sourced.
- [[https://cert-manager.io][Jetstack and all the cert-manager contributors]] for the framework that makes this extension possible.
- [[https://github.com/nolar][Sergey Vasilyev]] for kopf, so I don't have to learn Go yet.
